#!/bin/bash

echo "üé¨ Iniciando Demonstra√ß√£o Completa de Escalabilidade no Kubernetes"
echo "=================================================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fun√ß√£o para aguardar confirma√ß√£o do usu√°rio
wait_for_user() {
    echo ""
    read -p "Pressione Enter para continuar... "
    echo ""
}

# Fun√ß√£o para mostrar progresso
show_progress() {
    echo -e "${BLUE}üîÑ $1${NC}"
}

# Verificar pr√©-requisitos
log_info "Verificando pr√©-requisitos..."
if ! command -v kind &> /dev/null; then
    log_error "Kind n√£o est√° instalado"
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    log_error "kubectl n√£o est√° instalado"
    exit 1
fi

if ! command -v helm &> /dev/null; then
    log_warning "Helm n√£o est√° instalado. Instalando..."
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
fi

log_success "Pr√©-requisitos verificados!"

echo ""
echo "üéØ Esta demonstra√ß√£o ir√° mostrar:"
echo "   1. Cria√ß√£o do cluster Kind"
echo "   2. Deploy da aplica√ß√£o de exemplo"
echo "   3. Configura√ß√£o do HPA"
echo "   4. Testes de escalabilidade"
echo "   5. Monitoramento em tempo real"
echo ""

wait_for_user

# Etapa 1: Setup do Cluster
log_info "Etapa 1: Configurando cluster Kind..."
show_progress "Criando cluster com 3 n√≥s..."
./scripts/setup-cluster.sh

if [ $? -ne 0 ]; then
    log_error "Falha ao criar cluster"
    exit 1
fi

log_success "Cluster criado com sucesso!"
wait_for_user

# Etapa 2: Deploy da Aplica√ß√£o
log_info "Etapa 2: Deploy da aplica√ß√£o de exemplo..."
show_progress "Aplicando configura√ß√µes base..."

kubectl apply -f yamls_exemplo/00_servico_base.yaml
kubectl wait --for=condition=Ready pods -l app=php-apache -n aula-k8s --timeout=120s

if [ $? -ne 0 ]; then
    log_error "Falha ao deploy da aplica√ß√£o"
    exit 1
fi

log_success "Aplica√ß√£o deployada com sucesso!"
echo ""
echo "üìä Status da aplica√ß√£o:"
kubectl get pods -n aula-k8s -l app=php-apache

wait_for_user

# Etapa 3: Demonstra√ß√£o de Escala Manual
log_info "Etapa 3: Demonstra√ß√£o de escala manual..."
show_progress "Mostrando escala manual..."

echo "üìà Escalando para 3 r√©plicas..."
kubectl scale deployment php-apache -n aula-k8s --replicas=3

echo "‚è≥ Aguardando pods estarem prontos..."
kubectl wait --for=condition=Ready pods -l app=php-apache -n aula-k8s --timeout=120s

echo "üìä Status ap√≥s escala manual:"
kubectl get pods -n aula-k8s -l app=php-apache

echo ""
echo "üîÑ Voltando para 1 r√©plica..."
kubectl scale deployment php-apache -n aula-k8s --replicas=1

log_success "Escala manual demonstrada!"
wait_for_user

# Etapa 4: Configura√ß√£o do HPA
log_info "Etapa 4: Configura√ß√£o do HPA..."
show_progress "Aplicando configura√ß√£o do HPA..."

kubectl apply -f yamls_exemplo/01_hpa_base.yaml

echo "‚è≥ Aguardando HPA estar ativo..."
sleep 10

echo "üìä Status do HPA:"
kubectl get hpa -n aula-k8s

log_success "HPA configurado com sucesso!"
wait_for_user

# Etapa 5: Teste de Escalabilidade
log_info "Etapa 5: Teste de escalabilidade autom√°tica..."
show_progress "Iniciando teste de carga..."

echo "üß™ Executando teste de carga b√°sico..."
./scripts/load-test.sh

log_success "Teste de carga conclu√≠do!"
wait_for_user

# Etapa 6: Monitoramento
log_info "Etapa 6: Instala√ß√£o do stack de monitoramento..."
show_progress "Instalando Prometheus e Grafana..."

./scripts/install-monitoring.sh

if [ $? -ne 0 ]; then
    log_warning "Falha na instala√ß√£o do monitoramento. Continuando..."
else
    log_success "Monitoramento instalado com sucesso!"
fi

wait_for_user

# Etapa 7: Demonstra√ß√£o Final
log_info "Etapa 7: Demonstra√ß√£o final de escalabilidade..."
show_progress "Executando teste de estresse..."

echo "üî• Executando teste de estresse intensivo..."
./scripts/stress-test.sh

log_success "Demonstra√ß√£o conclu√≠da!"

echo ""
echo "üéâ Demonstra√ß√£o de Escalabilidade Conclu√≠da!"
echo ""
echo "üìö Resumo do que foi demonstrado:"
echo "   ‚úÖ Cluster Kind com m√∫ltiplos n√≥s"
echo "   ‚úÖ Aplica√ß√£o web de exemplo"
echo "   ‚úÖ Escala manual com kubectl scale"
echo "   ‚úÖ HPA com escalabilidade autom√°tica"
echo "   ‚úÖ Testes de carga e estresse"
echo "   ‚úÖ Stack de monitoramento"
echo ""
echo "üîó Pr√≥ximos passos:"
echo "   - Explore os dashboards do Grafana"
echo "   - Experimente diferentes configura√ß√µes de HPA"
echo "   - Teste com diferentes cargas de trabalho"
echo "   - Configure alertas e notifica√ß√µes"
echo ""
echo "üí° Para limpar o ambiente:"
echo "   kind delete cluster --name aula-escalabilidade"
